// «”„ –«ﬂ—… «· Œ“Ì‰ «·„ƒﬁ  (Cache) · ÿ»Ìﬁﬂ. ﬁ„ » €ÌÌ—Â ⁄‰œ  ÕœÌÀ «·„Ê«—œ ·÷„«‰  ÕœÌÀÂ« ·œÏ «·„” Œœ„Ì‰.
//  „  ÕœÌÀ «·≈’œ«— ·Ì‘„· «·„·›«  «·ÃœÌœ….
const CACHE_NAME = 'smart-pph-cache-v1.1.0';

// ﬁ«∆„… »«·„·›«  «·√”«”Ì… «· Ì ÌÃ»  Œ“Ì‰Â« „ƒﬁ « ⁄‰œ  À»Ì  ⁄«„· «·Œœ„….
//  √ﬂœ „‰ √‰ Â–Â «·„”«—«  ’ÕÌÕ… »«·‰”»… ·„Êﬁ⁄ „·›« ﬂ.
const urlsToCache = [
    '/', // «·’›Õ… «·—∆Ì”Ì… (⁄«œ… index.html)
    'index.html',
    'discounts.html', // ’›Õ… «·Œ’Ê„«  «·ÃœÌœ…
    'database.html', // ’›Õ… ﬁ«⁄œ… «·»Ì«‰«  (ﬁœ  ﬂÊ‰ customers.html ›Ì ”Ì«ﬁ ”«»ﬁ° ·ﬂ‰ ”√› —÷ database.html «·¬‰)
    'fitnessup.html', // ’›Õ… «··Ì«ﬁ… «·»œ‰Ì… «·ÃœÌœ…
    'manifest.json', // „·› «·»Ì«‰ «·Œ«’ » ÿ»Ìﬁ «·ÊÌ» «· ﬁœ„Ì
    'pphicon.png', // «·’Ê—… «·ÃœÌœ…
    'https://cdn.tailwindcss.com', // Tailwind CSS CDN
    'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js', // SheetJS library
    // ŒÿÊÿ Cairo „‰ Google Fonts (≈–« ﬂ‰   ” Œœ„Â«)
    'https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap',
    'https://fonts.gstatic.com/s/cairo/v19/SLXGc1nY6HgpO7qL0YuRzyhJzW8.woff2', // „À«· ·„·› Œÿ° ﬁœ  Õ «Ã ≈·Ï ≈÷«›… «·„“Ìœ
    'https://fonts.gstatic.com/s/cairo/v19/SLXGc1nY6HgpO7qL0YuRzyhJzW8.woff',
    // ≈–« ﬂ«‰ ·œÌﬂ √Ì ’Ê— √Ê „·›«  JavaScript √Ê CSS ≈÷«›Ì… „Õ·Ì…° √÷›Â« Â‰«
    // 'path/to/your/script.js',
    // 'path/to/your/style.css'
];

// ÕœÀ «· À»Ì  (Install Event):
// Ì „  ‘€Ì· Â–« «·ÕœÀ ⁄‰œ„« ÌﬁÊ„ «·„ ’›Õ » À»Ì  ⁄«„· «·Œœ„….
// Â‰« ‰ﬁÊ„ »› Õ –«ﬂ—…  Œ“Ì‰ „ƒﬁ  ÃœÌœ… Ê Œ“Ì‰ Ã„Ì⁄ «·„·›«  «·√”«”Ì… ›ÌÂ«.
self.addEventListener('install', (event) => {
    console.log('Service Worker: Installing...');
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                console.log('Service Worker: Caching App Shell');
                return cache.addAll(urlsToCache);
            })
            .catch(error => {
                console.error('Service Worker: Cache addAll failed', error);
            })
    );
});

// ÕœÀ «· ›⁄Ì· (Activate Event):
// Ì „  ‘€Ì· Â–« «·ÕœÀ »⁄œ  À»Ì  ⁄«„· «·Œœ„… »‰Ã«Õ.
// Â‰« ‰ﬁÊ„ » ‰ŸÌ› √Ì –«ﬂ—…  Œ“Ì‰ „ƒﬁ  ﬁœÌ„… ·„  ⁄œ „” Œœ„….
self.addEventListener('activate', (event) => {
    console.log('Service Worker: Activating...');
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== CACHE_NAME) {
                        console.log('Service Worker: Deleting old cache', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});

// ÕœÀ «·Ã·» (Fetch Event):
// Ì „  ‘€Ì· Â–« «·ÕœÀ ›Ì ﬂ· „—… ÌÕ«Ê· ›ÌÂ« «·„ ’›Õ Ã·» „Ê—œ („À· ’›Õ… HTML° ’Ê—…° CSS° JS).
// Â‰« ‰” Œœ„ «” —« ÌÃÌ… "Cache First" («·–«ﬂ—… «·„ƒﬁ … √Ê·«):
// 1. ‰Õ«Ê· Ã·» «·„Ê—œ „‰ –«ﬂ—… «· Œ“Ì‰ «·„ƒﬁ .
// 2. ≈–« ÊÃœ‰«Â° ‰⁄ÌœÂ ›Ê—«.
// 3. ≈–« ·„ ‰ÃœÂ ›Ì «·–«ﬂ—… «·„ƒﬁ …° ‰–Â» ≈·Ï «·‘»ﬂ… ·Ã·»Â.
// 4. »„Ã—œ Ã·»Â „‰ «·‘»ﬂ…° ‰ﬁÊ„ » Œ“Ì‰Â „ƒﬁ « ··«” Œœ«„ «·„” ﬁ»·Ì À„ ‰⁄ÌœÂ.
self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request)
            .then((response) => {
                // ≈–« ﬂ«‰ «·„Ê—œ „ÊÃÊœ« ›Ì –«ﬂ—… «· Œ“Ì‰ «·„ƒﬁ ° √⁄œÂ
                if (response) {
                    return response;
                }
                // ≈–« ·„ Ìﬂ‰ „ÊÃÊœ«° «–Â» ≈·Ï «·‘»ﬂ… ·Ã·»Â
                return fetch(event.request)
                    .then((networkResponse) => {
                        //  Õﬁﬁ „„« ≈–« ﬂ«‰ «·«” Ã«»… ’«·Õ… ﬁ»· «· Œ“Ì‰ «·„ƒﬁ 
                        if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
                            return networkResponse;
                        }

                        // «” ‰”Œ «·«” Ã«»… ·√‰Â« "Stream" Ê·« Ì„ﬂ‰ ﬁ—«¡ Â« „— Ì‰
                        const responseToCache = networkResponse.clone();
                        caches.open(CACHE_NAME)
                            .then((cache) => {
                                cache.put(event.request, responseToCache);
                            });
                        return networkResponse;
                    })
                    .catch(error => {
                        console.error('Service Worker: Fetch failed for:', event.request.url, error);
                        // Ì„ﬂ‰ﬂ Â‰« ⁄—÷ ’›Õ… "€Ì— „ ’· »«·≈‰ —‰ " „Œ’’… ≈–« ›‘· «·Ã·»
                        // return caches.match('/offline.html');
                    });
            })
    );
});
